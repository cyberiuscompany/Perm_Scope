# modulos/remote_desktop_config.py
import platform
import subprocess
import os


def ejecutar():
    resultado = []
    sistema = platform.system()

    resultado.append("üñ•Ô∏è Configuraci√≥n de Escritorio Remoto:\n")

    try:
        if sistema == "Windows":
            resultado.append("üîç Comprobando RDP con: reg query y servicios...")

            try:
                # Verificar si RDP est√° habilitado en el registro
                reg_cmd = 'reg query "HKLM\\System\\CurrentControlSet\\Control\\Terminal Server" /v fDenyTSConnections'
                reg_out = subprocess.check_output(reg_cmd, shell=True, text=True)
                if '0x0' in reg_out:
                    resultado.append("‚úÖ RDP est√° habilitado en el sistema (fDenyTSConnections=0)")
                elif '0x1' in reg_out:
                    resultado.append("‚ùå RDP est√° deshabilitado (fDenyTSConnections=1)")
                else:
                    resultado.append("‚ö†Ô∏è No se pudo determinar claramente el estado de RDP.")
            except Exception as e:
                resultado.append(f"[!] Error al consultar el registro: {e}")

            # Verificar servicio
            try:
                status = subprocess.check_output("sc query TermService", shell=True, text=True)
                resultado.append("\nüõ†Ô∏è Servicio de Terminal Services:")
                resultado.append(status.strip())
            except Exception as e:
                resultado.append(f"[!] Error al comprobar el servicio TermService: {e}")

            # Comprobaci√≥n de redirecci√≥n del portapapeles
            resultado.append("\nüìã Redirecci√≥n del portapapeles en sesiones RDP:")
            try:
                cmd = 'reg query "HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services" /v fDisableClip'
                salida = subprocess.check_output(cmd, shell=True, text=True)
                if '0x0' in salida:
                    resultado.append("‚úÖ La redirecci√≥n del portapapeles RDP est√° habilitada (fDisableClip=0)")
                elif '0x1' in salida:
                    resultado.append("‚ùå La redirecci√≥n del portapapeles RDP est√° deshabilitada (fDisableClip=1)")
                else:
                    resultado.append("‚ö†Ô∏è No se pudo interpretar claramente el valor de fDisableClip")
            except subprocess.CalledProcessError:
                resultado.append("‚ö†Ô∏è No se encontr√≥ configuraci√≥n expl√≠cita en el registro (podr√≠a estar habilitado por defecto)")

        elif sistema == "Linux":
            resultado.append("üîç Buscando servicios RDP en Linux como xrdp, vino o VNC...")
            servicios = ["xrdp", "vino-server", "vncserver"]
            encontrados = []

            for servicio in servicios:
                try:
                    status = subprocess.check_output(f"systemctl is-active {servicio}", shell=True, text=True).strip()
                    encontrados.append(f"‚úÖ {servicio} est√° activo.")
                except subprocess.CalledProcessError:
                    encontrados.append(f"‚ùå {servicio} no est√° activo o no est√° instalado.")

            resultado.extend(encontrados)

            # Comprobaci√≥n de xrdp-chansrv
            resultado.append("\nüìã Redirecci√≥n del portapapeles en xrdp:")
            try:
                chansrv_status = subprocess.check_output("ps aux | grep xrdp-chansrv | grep -v grep", shell=True, text=True).strip()
                if chansrv_status:
                    resultado.append("‚úÖ xrdp-chansrv en ejecuci√≥n: Redirecci√≥n de portapapeles habilitada.")
                else:
                    resultado.append("‚ùå xrdp-chansrv no est√° en ejecuci√≥n.")
            except subprocess.CalledProcessError:
                resultado.append("‚ùå xrdp-chansrv no est√° corriendo.")

        else:
            resultado.append("Sistema operativo no soportado para este m√≥dulo.")

    except Exception as e:
        resultado.append(f"[!] Error general al comprobar Escritorio Remoto: {str(e)}")

    return "\n".join(resultado)
